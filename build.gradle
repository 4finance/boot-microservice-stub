buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:+'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:+'
        classpath 'com.ofg:uptodate-gradle-plugin:+'
    }
}

apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'uptodate'
apply plugin: 'spring-boot'

sourceCompatibility = 1.7


repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

ext {
    versionPrefix = "CD"
    buildNrLoc = project.hasProperty('buildNr') ? "${buildNr}" : "000"
    currentVersion = "${versionPrefix}-${buildNrLoc}"
    
    groovyVersion = '2.3.6'
    spockVersion = '0.7-groovy-2.0'
    curatorVersion = '2.5.0'
}

group = 'pl.microhackaton'
description = 'Twitter Places Analyzer Microservice Stub'
version = currentVersion

dependencies {
    compile "org.codehaus.groovy:groovy-all:$groovyVersion:indy"
    compile "org.apache.curator:curator-x-discovery:$curatorVersion"
    compile "org.apache.curator:curator-test:$curatorVersion"
    compile 'com.github.tomakehurst:wiremock:1.47'
    compile 'org.reflections:reflections:0.9.9-RC1'

    testCompile("org.spockframework:spock-core:$spockVersion") {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

// TO EXTRACT TO micro-stub-infra plugin

ext {
    repoUsername = 'deployment'
    repoPassword = 'deployment123'
    repoUrl = "http://nexus.microhackathon.pl/content/repositories/releases/"
    depsToExclude = [group: 'org.codehaus.groovy', name: 'groovy-all']
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact sourcesJar {
                classifier "sources"
            }

            artifact fatJar {
                classifier "shadow"
            }

            artifact groovylessFatJar {
                classifier "groovyless-shadow"
            }
        }
    }

    repositories {
        maven {
            credentials {
                username repoUsername
                password repoPassword
            }
            url repoUrl
        }
    }
}

springBoot.backupSource = false
jar.enabled = false

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task fatJar(type: Jar) {
    classifier = 'shadow'
    from sourceSets.main.output
}

task groovylessFatJar(type: Jar) {
    classifier = 'groovyless-shadow'
    from sourceSets.main.output
}

task fatJarBoot(type: BootRepackage, dependsOn: fatJar) {
    withJarTask = fatJar
}

task groovylessSpringBoot(type: BootRepackage, dependsOn: groovylessFatJar) {
    withJarTask = groovylessFatJar
    customConfiguration = 'groovyless'
}

configurations {
    groovyless.exclude depsToExclude
}

dependencies {
    groovyless configurations.runtime
}

task bootJars(dependsOn: build)
bootJars {
    dependsOn = [sourcesJar, fatJarBoot, groovylessSpringBoot]
}
project.tasks.findAll {it.name.startsWith 'publish'}*.dependsOn(bootJars)
